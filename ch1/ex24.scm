(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder (square (expmod base (/ exp 2) m))
                    m))
        (else
         (remainder (* base (expmod base (- exp 1) m))
                    m))))

(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it (+ 1 (random (- n 1)))))

(define (fast-prime? n times)
  (cond ((= times 0) true)
        ((fermat-test n) (fast-prime? n (- times 1)))
        (else false)))

(define (timed-prime-test n)
  (define (start-prime-test start-time)
    (if (fast-prime? n 1000)
      (report-prime (- (real-time-clock) start-time))))
  (define (report-prime elapsed-time)
    (newline)
    (display n)
    (display " *** ")
    (display elapsed-time))
  (start-prime-test (real-time-clock)))

(define (search-for-primes from to)
  (define (iter n)
    (timed-prime-test n)
    (if (< n to) (iter (+ n 2)) #t))
  (iter (if (even? from) (+ from 1) from)))

; (newline)
; (display "Three smallest primes >1e3?")
; (search-for-primes 1000 1019)
; (newline)
; (display "Three smallest primes >1e4?")
; (search-for-primes 10000 10037)
; (newline)
; (display "Three smallest primes >1e5?")
; (search-for-primes 100000 100043)
; (newline)
; (display "Three smallest primes >1e6?")
; (search-for-primes 1000000 1000037)

(newline)
(display "Smallest primes 1e11..1e11+100?")
(search-for-primes (expt 10 11) (+ 100 (expt 10 11)))

(newline)
(display "Smallest primes 1e12..1e12+100?")
(search-for-primes (expt 10 12) (+ 100 (expt 10 12)))
